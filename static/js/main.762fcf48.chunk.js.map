{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","useState","currentPosition","setCurrentPosition","sliderWidth","length","containerWidth","carouselListWidth","moveForvard","stepWidth","frameWidth","scrolProgress","distanceToEnd","containerStyles","width","carouselListStyle","transform","transitionDuration","className","style","map","image","key","altNum","src","id","alt","height","type","onClick","App","state","currentStep","currentItemWidth","currentFrameWidth","this","htmlFor","defaultValue","onChange","event","setState","target","value","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.762fcf48.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n};\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step = 3,\n  frameSize = 3,\n  itemWidth = 130,\n  animationDuration = 1000,\n  infinite,\n}) => {\n  const [currentPosition, setCurrentPosition] = useState(0);\n\n  const sliderWidth = images.length * itemWidth;\n  const containerWidth = `${itemWidth * frameSize}px`;\n  const carouselListWidth = `${sliderWidth}px`;\n  const moveForvard = `translateX(-${currentPosition}px)`;\n  const stepWidth = step * itemWidth;\n  const frameWidth = frameSize * itemWidth;\n  const scrolProgress = sliderWidth - stepWidth - currentPosition;\n  const distanceToEnd = sliderWidth - stepWidth - scrolProgress;\n  const animationSpeed = `${animationDuration}ms`;\n\n  const handelDownCurrentPosition = () => {\n    if (currentPosition > 0) {\n      if (distanceToEnd >= frameWidth) {\n        setCurrentPosition(currentPosition - stepWidth);\n      } else {\n        setCurrentPosition(currentPosition - (frameWidth - stepWidth));\n      }\n    } else if (infinite) {\n      setCurrentPosition(sliderWidth - frameWidth);\n    }\n  };\n\n  const handelUpCurrentPosition = () => {\n    if (currentPosition < (images.length - frameSize) * itemWidth) {\n      if (scrolProgress >= frameWidth) {\n        setCurrentPosition(currentPosition + stepWidth);\n      } else {\n        setCurrentPosition(currentPosition + (frameWidth - stepWidth));\n      }\n    } else if (infinite) {\n      setCurrentPosition(0);\n    }\n  };\n\n  const containerStyles = {\n    width: containerWidth,\n  };\n\n  const carouselListStyle = {\n    width: carouselListWidth,\n    transform: moveForvard,\n    transitionDuration: animationSpeed,\n  };\n\n  return (\n    <div className=\"Carousel\">\n      <div\n        className=\"container\"\n        style={containerStyles}\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={carouselListStyle}\n        >\n          {images.map((image: string, key) => {\n            const altNum = `${key + 1}`;\n\n            return (\n              <li key={altNum}>\n                <img\n                  src={image}\n                  id={altNum}\n                  alt={altNum}\n                  width={itemWidth}\n                  height={itemWidth}\n                />\n              </li>\n            );\n          })}\n        </ul>\n        <div className=\"Carousel__buttons-box\">\n          <button\n            type=\"button\"\n            onClick={handelDownCurrentPosition}\n            data-cy=\"prev\"\n          >\n            Prev\n          </button>\n          <button\n            type=\"button\"\n            onClick={handelUpCurrentPosition}\n            data-cy=\"next\"\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n  currentStep: number;\n  currentItemWidth: number;\n  currentFrameWidth: number;\n  animationDuration: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n\n    currentStep: 3,\n    currentItemWidth: 130,\n    currentFrameWidth: 3,\n    animationDuration: 1000,\n  };\n\n  render() {\n    const { images } = this.state;\n    const { currentStep } = this.state;\n    const { currentItemWidth } = this.state;\n    const { currentFrameWidth } = this.state;\n    const { animationDuration } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__title-block\">\n          <h1 className=\"App__header\" data-cy=\"title\">\n            Carousel with\n            {images.length}\n            images\n          </h1>\n          <div className=\"App__inputs-container\">\n            <label htmlFor=\"stepId\">Step</label>\n            <input\n              type=\"text\"\n              className=\"App__input\"\n              id=\"stepId\"\n              defaultValue={currentStep}\n              onChange={\n                (event) => this.setState({ currentStep: +event.target.value })\n              }\n            />\n\n            <label htmlFor=\"itemId\">Item</label>\n            <input\n              type=\"text\"\n              className=\"App__input\"\n              id=\"itemId\"\n              defaultValue={currentItemWidth}\n              onChange={\n                (event) => this.setState(\n                  { currentItemWidth: +event.target.value },\n                )\n              }\n            />\n\n            <label htmlFor=\"frameId\">Frame</label>\n            <input\n              type=\"text\"\n              className=\"App__input\"\n              id=\"frameId\"\n              defaultValue={currentFrameWidth}\n              onChange={\n                (event) => this.setState(\n                  { currentFrameWidth: +event.target.value },\n                )\n              }\n            />\n\n            <label htmlFor=\"animationDuration\">Duration</label>\n            <input\n              type=\"text\"\n              className=\"App__input\"\n              id=\"animationDuration\"\n              defaultValue={animationDuration}\n              onChange={\n                (event) => this.setState(\n                  { animationDuration: +event.target.value },\n                )\n              }\n            />\n          </div>\n\n        </div>\n\n        <Carousel\n          images={images}\n          step={currentStep}\n          frameSize={currentFrameWidth}\n          itemWidth={currentItemWidth}\n          animationDuration={animationDuration}\n          infinite={false}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}